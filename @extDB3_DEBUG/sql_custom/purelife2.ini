[Default]

Version = 1
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out
Strip Chars Mode = 0
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.

Input SQF Parser = false
;; Expermential
;;   If enabled will use SQF Array Parser instead of : seperator for values
;;   i.e   0:SQL:UpdatePlayer:["Joe",[1,2,0],0.22333,"PlayerBackpack",-3]
;;   Advantage is that you don't need to strip : seperator from user inputted values

; --------------------------------------------------------------------------------
; PLAYER SAVING
; --------------------------------------------------------------------------------

[playerExists]
SQL1_1 = SELECT IF ((SELECT 1 FROM players WHERE steamid = ?), 'true', 'false');
SQL1_INPUTS = 1

[createPlayer]
SQL1_1 = INSERT INTO users SET steamid = ?, username = ?;
SQL1_INPUTS = 1,2

[checkPlayer]
SQL1_1 = SELECT IF ((SELECT 1 FROM players WHERE pid = ?), 'true', 'false');
SQL1_INPUTS = 1

[insertPlayer]
SQL1_1 = INSERT INTO players SET pid = ?, name = ?, cash = ?, bank = ?, creditBalance = ?, creditLimit = ?, position = ?, civ_gear = ?, cop_gear = ?, med_gear = ?, active_gear = ?, active_role = ?, cop_licenses = '"[]"', med_licenses = '"[]"', civ_licenses = '"[]"';
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12

[getPlayerData]
SQL1_1 = SELECT cash, bank, creditBalance, creditLimit, coplevel, mediclevel, civ_licenses, cop_licenses, med_licenses, civ_gear, cop_gear, med_gear, active_gear, active_role, stats, arrested, adminlevel, donorlevel, alive, position, playtime, blacklist FROM players WHERE pid = ?;
SQL1_INPUTS = 1

[updatePlayerMoney]
SQL1_1 = UPDATE players SET cash = ?, bank = ?, creditBalance = ?, creditLimit = ? WHERE pid = ?;
SQL1_INPUTS = 1,2,3,4,5

[updatePlayerLicenses]
SQL1_1 = UPDATE players SET civ_licenses = ?, cop_licenses = ?, med_licenses = ? WHERE pid = ?;
SQL1_INPUTS = 1,2,3,4

[updatePlayerGear]
SQL1_1 = UPDATE players SET civ_gear = ?, cop_gear = ?, med_gear = ?, active_gear = ? WHERE pid = ?;
SQL1_INPUTS = 1,2,3,4,5

[updatePlayerRole]
SQL1_1 = UPDATE players SET active_role = ? WHERE pid = ?;
SQL1_INPUTS = 1,2

[updatePlayerPosition]
SQL1_1 = UPDATE players SET position = ? WHERE pid = ?;
SQL1_INPUTS = 1,2

[updatePlaytime]
SQL1_1 = UPDATE players SET playtime = playtime + ? WHERE pid = ?;
SQL1_INPUTS = 1,2

[updateAllPlayerData]
SQL1_1 = UPDATE players SET cash = ?, bank = ?, creditBalance = ?, creditLimit = ?, civ_licenses = ?, cop_licenses = ?, med_licenses = ?, civ_gear = ?, cop_gear = ?, med_gear = ?, active_gear = ?, active_role = ?, stats = ?, arrested = ?, alive = ?, position = ?, playtime = ? WHERE pid = ?;
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18

[updateAlive]
SQL1_1 = UPDATE players SET alive = ? WHERE pid = ?;
SQL1_INPUTS = 1,2

[updateArrested]
SQL1_1 = UPDATE players SET arrested = ? WHERE pid = ?;
SQL1_INPUTS = 1,2

; --------------------------------------------------------------------------------
; VEHICLE SAVING
; --------------------------------------------------------------------------------

[getTuningData]
SQL1_1 = SELECT tuningData FROM vehicles WHERE id = ?;
SQL1_INPUTS = 1

[updateTuningData]
SQL1_1 = UPDATE vehicles SET tuningData = ? WHERE id = ?;
SQL1_INPUTS = 1,2

[vehicleDead]
SQL1_1 = UPDATE vehicles SET alive=? WHERE pid=? AND plate=?;
SQL1_INPUTS = 1, 2, 3

[vehicleInsert]
SQL1_1 = INSERT INTO vehicles (side, classname, type, pid, alive, active, inventory, color, plate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
SQL1_INPUTS = 1,2,3,4,5,6,7,8,9

[vehicleInfo]
SQL1_1 = SELECT id, side, classname, type, pid, alive, active, plate, color FROM vehicles WHERE id=? AND pid=?;
SQL1_INPUTS = 1,2

[vehiclesInfo]
SQL1_1 = SELECT id, side, classname, type, pid, alive, active, plate, color FROM vehicles WHERE pid = ? AND alive = 1 AND active = 0 AND side = ? AND type = ?;
SQL1_INPUTS = 1,2,3

[vehicleUpdateActive]
SQL1_1 = UPDATE vehicles SET active = ? WHERE pid = ? AND id = ?;
SQL1_INPUTS = 1,2,3

[vehicleUpdateActivePlate]
SQL1_1 = UPDATE vehicles SET active = ? WHERE pid = ? AND plate = ?;
SQL1_INPUTS = 1,2,3

[vehicleUpdateAlive]
SQL1_1 = UPDATE vehicles SET alive = ? WHERE pid = ? AND id = ?;
SQL1_INPUTS = 1,2,3

[vehicleUpdateAlivePlate]
SQL1_1 = UPDATE vehicles SET alive = ? WHERE pid = ? AND plate = ?;
SQL1_INPUTS = 1,2,3

; --------------------------------------------------------------------------------
; BUSINESSES
; --------------------------------------------------------------------------------

[businessIDPlayer]
SQL1_1 = SELECT id FROM businesses WHERE members LIKE ? AND active = '1';
SQL1_INPUTS = 1

[businessNameSelectID]
SQL1_1 = SELECT id FROM businesses WHERE name = ? AND active = ?;
SQL1_INPUTS = 1,2

[businessOwnerSelectID]
SQL1_1 = SELECT id FROM businesses WHERE owner = ? AND active = ?;
SQL1_INPUTS = 1,2

[businessInsert]
SQL1_1 = INSERT INTO businesses (owner, name, members) VALUES(?, ?, ?);
SQL1_INPUTS = 1,2,3

[businessUpdate]
SQL1_1 = UPDATE businesses SET active = 1, owner = ?,members = ? WHERE id = ?;
SQL1_INPUTS = 1,2,3

[businessRemove]
SQL1_1 = UPDATE businesses SET active = '0' WHERE id = ?;
SQL1_INPUTS = 1

[businessInfo]
SQL1_1 = SELECT id, owner, name bank, members FROM businesses WHERE active='1' AND members LIKE ?;
SQL1_INPUTS = 1

[businessBankInfoUpdate]
SQL1_1 = UPDATE businesses SET bank = ? WHERE id = ?;
SQL1_INPUTS = 1,2

[businessInfoUpdate]
SQL1_1 = UPDATE businesses SET bank = ? owner = ? WHERE id = ?;
SQL1_INPUTS = 1,2,3,4

[businessMembersUpdate]
SQL1_1 = UPDATE businesses SET members = ? WHERE id = ?;
SQL1_INPUTS = 1,2

[businessOwnerUpdate]
SQL1_1 = UPDATE businesses SET owner = ? WHERE id = ?;
SQL1_INPUTS = 1,2

; --------------------------------------------------------------------------------
; HOUSES
; --------------------------------------------------------------------------------

[housingCount]
SQL1_1 = SELECT COUNT(*) FROM houses WHERE owned = '1';

[housingInit]
SQL1_1 = SELECT houses.id, houses.pid, houses.pos, players.name FROM houses INNER JOIN players ON houses.pid = players.playerid WHERE houses.owned = '1' LIMIT ?,10;
SQL1_INPUTS = 1

[housingFetchPlayerHouse]
SQL1_1 = SELECT pid, pos, inventory, containers FROM houses WHERE pid = ? AND owned = '1';
SQL1_INPUTS = 1

[housingCheckHouse]
SQL1_1 = SELECT CASE WHEN EXISTS(SELECT id FROM houses WHERE pos = ? AND owned = '1') THEN 'true' ELSE 'false' END
SQL1_INPUTS = 1

[housingAddHouse]
SQL1_1 = INSERT INTO houses (pid, pos, inventory, containers, owned) VALUES(?, ?, ?, ?, ?);
SQL1_INPUTS = 1,2,3,4,5
SQL2_1 = SELECT id FROM houses WHERE pos = ? AND pid = ? AND owned = '1';
SQL2_INPUTS = 2,1

[housingSellHouse]
SQL1_1 = UPDATE houses SET owned = '0', pos = '[]' WHERE pid = ? AND pos = ? AND owned = '1';
SQL1_INPUTS = 1,2,3

[housingSellHouse2]
SQL1_1 = UPDATE houses SET owned = '0', pos = '[]' WHERE id = ?;
SQL1_INPUTS = 1

[houseUpdateContainer]
SQL1_1 = UPDATE houses SET containers = ? WHERE id = ?;
SQL1_INPUTS = 1,2

[housingUpdateInventory]
SQL1_1 = UPDATE houses SET inventory = ? WHERE id = ?;
SQL1_INPUTS = 1,2

[housingCleanup]
SQL1_1 = SELECT pid, pos, inventory, containers FROM houses WHERE pid = ? AND owned = '1';
SQL1_INPUTS = 1

; --------------------------------------------------------------------------------
; PRESIDENCY
; --------------------------------------------------------------------------------

[getCandidates]
SQL1_1 = SELECT name, votes FROM candidates WHERE election = ?;
SQL1_INPUTS = 1

[getVotes]
SQL1_1 = SELECT votes FROM candidates WHERE name = ? AND election = ?;
SQL1_INPUTS = 1,2

[castVote]
SQL1_1 = UPDATE candidates SET votes = ? WHERE name = ? AND election = ?;
SQL1_INPUTS = 1,2,3

; --------------------------------------------------------------------------------
; ECONOMY
; --------------------------------------------------------------------------------

[getPrices]
SQL1_1 = SELECT commodity, price FROM economy;

[setPrice]
SQL1_1 = UPDATE economy SET price = ? WHERE commodity = ?;
SQL1_INPUTS = 1,2

; --------------------------------------------------------------------------------
; TRANSACTIONS/PURCHASES
; --------------------------------------------------------------------------------

[addTransaction]
SQL1_1 = INSERT INTO transactions SET fromID = ?, toID = ?, amount = ?;
SQL1_INPUTS = 1,2,3

[addPurchase]
SQL1_1 = INSERT INTO purchases SET who = ?, store = ?, amount = ?;
SQL1_INPUTS = 1,2,3

; --------------------------------------------------------------------------------
; FINES
; --------------------------------------------------------------------------------

[addFine]
SQL1_1 = INSERT INTO fines SET pid = ?, name = ?, amount = ?;
SQL1_INPUTS = 1,2,3

[getFines]
SQL1_1 = SELECT SUM(amount) FROM fines WHERE pid = ? AND paid = 0;
SQL1_INPUTS = 1

[updateFines]
SQL1_1 = UPDATE fines SET paid = 1 WHERE pid = ? AND paid = 0;
SQL1_INPUTS = 1
